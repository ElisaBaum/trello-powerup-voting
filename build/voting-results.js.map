{"version":3,"sources":["voting-results.ts","services/vote-service.ts","enums/VotingType.ts","services/asset-service.ts","packages/undefined@undefined"],"names":[],"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","file":"","sourcesContent":["import {getVotingResults} from \"./services/vote-service\";\nimport {iframe} from \"trello-powerups\";\nimport {IMember} from \"./interfaces/IMember\";\nimport thumbsUpImg from './images/thumbs_up_white.svg';\nimport thumbsDownImg from './images/thumbs_down_white.svg';\nimport {cleanupPath} from \"./services/asset-service\";\n\nconst upVotesSelector = $('#upVoters');\nconst upVotesIconSelector = $('#upVotesIcon');\n\nconst downVotesSelector = $('#downVoters');\nconst downVotesIconSelector = $('#downVotesIcon');\n\nconst t = iframe();\n\nconst membersWithFullNameFilter = (member: IMember) => member.fullName !== undefined;\n\nfunction votingResultText(voteAnonymously: boolean, voters: IMember[]): string {\n    if (voteAnonymously) {\n        return voters.length.toString();\n    } else {\n        return voters.filter(membersWithFullNameFilter).map(member => member.fullName).join(', ');\n    }\n}\n\nconst votingResultIcon = (image) => 'url(\"' + cleanupPath(image) + '\")';\n\nt.render(function () {\n    getVotingResults(t)\n        .then((results) => {\n            if (results) {\n                upVotesSelector.text(votingResultText(results.voteAnonymously, results.upVoters));\n                upVotesIconSelector.css('background-image', votingResultIcon(thumbsUpImg));\n\n                downVotesSelector.text(votingResultText(results.voteAnonymously, results.downVoters));\n                downVotesIconSelector.css('background-image', votingResultIcon(thumbsDownImg));\n            }\n        })\n        .then(() => t.sizeTo('#votingResults'));\n});\n","import {ICardVotings} from \"../interfaces/ICardVotings\";\nimport {VotingType} from \"../enums/VotingType\";\nimport {IVotingResults} from \"../interfaces/IVotingResults\";\nimport {IMember} from \"../interfaces/IMember\";\nimport {IVote, IVoteAnonymous} from \"../interfaces/IVote\";\n\nfunction isAnonymous(vote: IVote | IVoteAnonymous): vote is IVoteAnonymous {\n    return (<IVoteAnonymous>vote).memberId !== undefined;\n}\n\nconst votesForMemberFilter = (currentMemberId: string) => (vote: IVote | IVoteAnonymous) =>\n    isAnonymous(vote) ? vote.memberId === currentMemberId : vote.member.id === currentMemberId;\n\nconst voteConverter = (vote: IVote | IVoteAnonymous): IVote => {\n    if (isAnonymous(vote)) {\n        return {\n            member: { id: vote.memberId },\n            votingType: vote.votingType\n        }\n    } else {\n        return vote;\n    }\n};\n\nconst votingsOnCardFilter = (currentCardId: string) => (votings: ICardVotings) => votings.cardId === currentCardId;\n\nfunction getVotesOnCard(votings: ICardVotings[], currentCardId: string): IVote[] | undefined {\n    const existingVotesOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n    if (existingVotesOnCard) {\n        return existingVotesOnCard.votes.map(voteConverter);\n    }\n}\n\nfunction getVotesOnCardForMember(votings: ICardVotings[], currentCardId: string, currentMemberId: string): IVote | undefined {\n    const votesOnCard = getVotesOnCard(votings, currentCardId);\n\n    if (votesOnCard) {\n        return votesOnCard.find(votesForMemberFilter(currentMemberId));\n    }\n}\n\nfunction updateVote(votes: IVote[], currentMember: IMember, currentVotingType: VotingType) {\n    const existingVoteForMember = votes.find(votesForMemberFilter(currentMember.id));\n\n    if (existingVoteForMember) {\n        if (isAnonymous(existingVoteForMember)) {\n            // todo\n            console.log(votes);\n            console.log('index: ' + votes.indexOf(existingVoteForMember));\n\n            // remove old vote\n            votes.splice(votes.indexOf(existingVoteForMember), 1);\n\n            // create and add new vote\n            votes.push({\n                member: currentMember,\n                votingType: currentVotingType\n            })\n        } else {\n            existingVoteForMember.votingType = currentVotingType;\n            existingVoteForMember.member = currentMember;\n        }\n    } else {\n        votes.push({\n            member: currentMember,\n            votingType: currentVotingType\n        })\n    }\n}\n\nexport const votingTypeFilter =\n    (currentVotingType: VotingType) => (vote: IVote) => vote.votingType === currentVotingType;\n\nexport function getVotesOnCurrentCard(t: any): Promise<IVote[] | undefined> {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n        ])\n        .then(([votings, currentCardId]) => getVotesOnCard(votings, currentCardId));\n}\n\nexport function getVotesOnCurrentCardForCurrentMember(t: any): Promise<IVote | undefined> {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n            t.member('id').get('id') as Promise<string>\n        ])\n        .then(([votings, currentCardId, currentMemberId]) =>\n            getVotesOnCardForMember(votings, currentCardId, currentMemberId));\n}\n\nexport function vote(t: any, currentVotingType: VotingType) {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n            t.member('id', 'username', 'fullName', 'avatar') as Promise<IMember>,\n            t.get('board', 'shared', 'voteAnonymously', true) as Promise<boolean>\n        ])\n        .then(([votings, currentCardId, currentMember, voteAnonymously]) => {\n            const votesOnCard = getVotesOnCard(votings, currentCardId);\n\n            if (voteAnonymously) {\n                currentMember.fullName = undefined;\n            }\n\n            if (votesOnCard) {\n                updateVote(votesOnCard, currentMember, currentVotingType);\n            } else {\n                votings.push({\n                    cardId: currentCardId,\n                    votes: [{\n                        member: currentMember,\n                        votingType: currentVotingType\n                    }]\n                })\n            }\n\n            t.set('card', 'shared', 'votings', votings);\n        });\n}\n\nexport function deleteVote(t: any) {\n    return Promise\n    .all([\n        t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n        t.card('id').get('id') as Promise<string>,\n        t.member('id').get('id') as Promise<string>\n    ])\n    .then(([votings, currentCardId, currentMemberId]) => {\n        const existingVotingsOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n        if (existingVotingsOnCard) {\n            const votes = existingVotingsOnCard.votes;\n            const existingVoteForMember = votes.find(votesForMemberFilter(currentMemberId));\n\n            if (existingVoteForMember) {\n                votes.splice(votes.indexOf(existingVoteForMember), 1);\n            }\n        }\n        t.set('card', 'shared', 'votings', votings);\n    });\n\n}\n\nexport function getVotingResults(t: any): Promise<IVotingResults | undefined> {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.get('board', 'shared', 'voteAnonymously', true) as Promise<boolean>,\n            t.card('id').get('id') as Promise<string>,\n        ])\n        .then(([votings, voteAnonymously, currentCardId]) => {\n            const votes = getVotesOnCard(votings, currentCardId);\n\n            if (votes) {\n                const upVotes = votes.filter(votingTypeFilter(VotingType.UP)).map(vote => vote.member);\n                const downVotes = votes.filter(votingTypeFilter(VotingType.DOWN)).map(vote => vote.member);\n\n                return {\n                    voteAnonymously: voteAnonymously,\n                    upVoters: upVotes,\n                    downVoters: downVotes\n                }\n            }\n        });\n}\n","export const enum VotingType {\n    UP,\n    DOWN\n}","export function cleanupPath(path: string): string {\n    return '.' + path;\n}",null]}