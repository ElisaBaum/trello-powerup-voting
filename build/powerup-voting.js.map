{"version":3,"sources":["powerup-voting.ts","services/bagde-service.ts","enums/VotingType.ts","services/vote-service.ts","services/asset-service.ts","services/button-service.ts","packages/undefined@undefined"],"names":[],"mappings":"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","file":"","sourcesContent":["import {getBadges} from \"./services/bagde-service\";\nimport {getCardButtons} from \"./services/button-service\";\nimport {initialize} from \"trello-powerups\";\n\ninitialize({\n    'card-buttons': function (t, options) {\n        return getCardButtons(t);\n    },\n    'card-badges': function (t, options) {\n        return getBadges(t);\n    },\n    'card-detail-badges': function (t, options) {\n        return getBadges(t);\n    }\n});","import {ICardVotings} from \"../interfaces/ICardVotings\";\nimport {IVote} from \"../interfaces/IVote\";\nimport {VotingType} from \"../enums/VotingType\";\nimport {votingsOnCardFilter, votingTypeFilter} from \"./vote-service\";\nimport thumbsUpImg from '../images/thumbs_up_white.svg';\nimport thumbsDownImg from '../images/thumbs_down_white.svg';\nimport {cleanupPath} from \"./asset-service\";\nimport {IBadge} from \"../interfaces/IBadge\";\n\nfunction createBadge(votes: IVote[], votingType: VotingType): IBadge | undefined {\n    const numberOfVotes = votes.filter(votingTypeFilter(votingType)).length;\n\n    if (numberOfVotes) {\n        const badgeIcon = votingType == VotingType.up ? cleanupPath(thumbsUpImg) : cleanupPath(thumbsDownImg);\n        const badgeColor = votingType == VotingType.up ? 'green' : 'red';\n        const badgeTitle = votingType == VotingType.up ? 'Ups' : 'Downs';\n\n        return {\n            title: badgeTitle,\n            text: numberOfVotes,\n            icon: badgeIcon,\n            color: badgeColor\n        }\n    }\n}\n\nexport function getBadges(t: any) {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n        ])\n        .then(([votings, currentCardId]) => {\n            const existingVotingsOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n            if (existingVotingsOnCard) {\n                const upBadge = createBadge(existingVotingsOnCard.votes, VotingType.up);\n                const downBadge = createBadge(existingVotingsOnCard.votes, VotingType.down);\n\n                return [upBadge, downBadge].filter(badge => !!badge);\n            } else {\n                return [];\n            }\n        });\n}","export const enum VotingType {\n    up,\n    down\n}","import {ICardVotings} from \"../interfaces/ICardVotings\";\nimport {IVote} from \"../interfaces/IVote\";\nimport {VotingType} from \"../enums/VotingType\";\n\nexport const votesForMemberFilter = (currentMemberId: string) => (vote: IVote) => vote.memberId === currentMemberId;\n\nexport const votingsOnCardFilter =\n    (currentCardId: string) => (votings: ICardVotings) => votings.cardId === currentCardId;\n\nexport const votingTypeFilter =\n    (currentVotingType: VotingType) => (vote: IVote) => vote.votingType === currentVotingType;\n\nexport function getVoteForCurrentCardAndMember(t: any): Promise<IVote | undefined> {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n            t.member('id').get('id') as Promise<string>\n        ])\n        .then(([votings, currentCardId, currentMemberId]) => {\n            const existingVotingsOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n            if (existingVotingsOnCard) {\n                return existingVotingsOnCard.votes.find(votesForMemberFilter(currentMemberId));\n            }\n        });\n}\n\nexport function vote(t: any, currentVotingType: VotingType) {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n            t.member('id').get('id') as Promise<string>\n        ])\n        .then(([votings, currentCardId, currentMemberId]) => {\n            const existingVotingsOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n            if (existingVotingsOnCard) {\n                const existingVoteForMember = existingVotingsOnCard.votes.find(votesForMemberFilter(currentMemberId));\n\n                if (existingVoteForMember) {\n                    existingVoteForMember.votingType = currentVotingType;\n                } else {\n                    existingVotingsOnCard.votes.push({\n                        memberId: currentMemberId,\n                        votingType: currentVotingType\n                    })\n                }\n            } else {\n                votings.push({\n                    cardId: currentCardId,\n                    votes: [{\n                        memberId: currentMemberId,\n                        votingType: currentVotingType\n                    }]\n                })\n            }\n\n            t.set('card', 'shared', 'votings', votings);\n        });\n}\n\nexport function deleteVote(t: any) {\n    return Promise\n    .all([\n        t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n        t.card('id').get('id') as Promise<string>,\n        t.member('id').get('id') as Promise<string>\n    ])\n    .then(([votings, currentCardId, currentMemberId]) => {\n        const existingVotingsOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n        if (existingVotingsOnCard) {\n            const votes = existingVotingsOnCard.votes;\n            const existingVoteForMember = votes.find(votesForMemberFilter(currentMemberId));\n\n            if (existingVoteForMember) {\n                existingVotingsOnCard.votes = votes.slice(votes.indexOf(existingVoteForMember) -1, 1);\n            }\n        }\n        t.set('card', 'shared', 'votings', votings);\n    });\n\n}","export function cleanupPath(path: string): string {\n    return '.' + path;\n}","import {deleteVote, getVoteForCurrentCardAndMember, vote} from \"./vote-service\";\nimport {VotingType} from \"../enums/VotingType\";\nimport thumbsUpImg from '../images/thumbs_up.svg';\nimport thumbsDownImg from \"../images/thumbs_down.svg\";\nimport trashImg from \"../images/trash.svg\";\nimport {cleanupPath} from \"./asset-service\";\nimport {IButton} from \"../interfaces/IButton\";\n\nconst voteUpButton: IButton = {\n    icon: cleanupPath(thumbsUpImg),\n    text: 'Vote up',\n    callback(t) {\n        return vote(t, VotingType.up).then(t.closePopup());\n    }\n};\n\nconst voteDownButton: IButton = {\n    icon: cleanupPath(thumbsDownImg),\n    // hacky workaround to sort in correct order\n    text: '\\u200B' + 'Vote down',\n    callback(t) {\n        return vote(t, VotingType.down).then(t.closePopup());\n    }\n};\n\nconst deleteVoteButton: IButton = {\n    icon: cleanupPath(trashImg),\n    // hacky workaround to sort in correct order\n    text: '\\u2063' + 'Delete vote',\n    callback(t) {\n        return deleteVote(t).then(t.closePopup());\n    }\n};\n\nexport function getCardButtons(t) {\n    return getVoteForCurrentCardAndMember(t)\n        .then(function (vote) {\n            const buttons: IButton[] = [];\n\n            if (vote) {\n                switch (vote.votingType) {\n                    case VotingType.up: {\n                        buttons.push(voteDownButton);\n                        buttons.push(deleteVoteButton);\n                        break;\n                    }\n                    case VotingType.down: {\n                        buttons.push(voteUpButton);\n                        buttons.push(deleteVoteButton);\n                        break;\n                    }\n                }\n            } else {\n                buttons.push(voteUpButton);\n                buttons.push(voteDownButton);\n            }\n\n            return buttons;\n        });\n}",null]}