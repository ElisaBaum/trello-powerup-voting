{"version":3,"sources":["powerup-voting.ts","services/bagde-service.ts","enums/VotingType.ts","services/vote-service.ts","services/asset-service.ts","services/button-service.ts","services/attachment-service.ts","packages/undefined@undefined"],"names":[],"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","file":"","sourcesContent":["import {getBadges} from \"./services/bagde-service\";\nimport {getCardButtons} from \"./services/button-service\";\nimport {initialize} from \"trello-powerups\";\nimport {getAttachmentSections} from \"./services/attachment-service\";\n\ninitialize({\n    'card-buttons': function (t, options) {\n        return getCardButtons(t);\n    },\n    'card-badges': function (t, options) {\n        return getBadges(t);\n    },\n    'attachment-sections': function(t, options) {\n        return getAttachmentSections(t, options);\n    }\n});","import {VotingType} from \"../enums/VotingType\";\nimport {getVotesOnCurrentCard, votingTypeFilter} from \"./vote-service\";\nimport thumbsUpImg from '../images/thumbs_up_white.svg';\nimport thumbsDownImg from '../images/thumbs_down_white.svg';\nimport {cleanupPath} from \"./asset-service\";\nimport {IBadge} from \"../interfaces/IBadge\";\nimport {IVote} from \"../interfaces/IVote\";\n\nconst badgeColor = (votingType: VotingType) => votingType === VotingType.UP ? 'green' : 'red';\nconst badgeTitle = (votingType: VotingType) => votingType === VotingType.UP ? 'Ups' : 'Downs';\nconst badgeIcon = (votingType: VotingType) => votingType == VotingType.UP ? cleanupPath(thumbsUpImg) : cleanupPath(thumbsDownImg);\n\nfunction createBadge(votes: IVote[], votingType: VotingType): IBadge | undefined {\n    const numberOfVotes = votes.filter(votingTypeFilter(votingType)).length;\n\n    if (numberOfVotes) {\n        return {\n            title: badgeTitle(votingType),\n            text: numberOfVotes,\n            icon: badgeIcon(votingType),\n            color: badgeColor(votingType)\n        }\n    }\n}\n\nexport function getBadges(t: any) {\n    return getVotesOnCurrentCard(t)\n        .then((votes) => {\n            if (votes) {\n                const upBadge = createBadge(votes, VotingType.UP);\n                const downBadge = createBadge(votes, VotingType.DOWN);\n                return [upBadge, downBadge].filter(badge => !!badge);\n            } else {\n                return [];\n            }\n        });\n}","export const enum VotingType {\n    UP,\n    DOWN\n}","import {ICardVotings} from \"../interfaces/ICardVotings\";\nimport {VotingType} from \"../enums/VotingType\";\nimport {IVotingResults} from \"../interfaces/IVotingResults\";\nimport {IMember} from \"../interfaces/IMember\";\nimport {IVote, IVoteAnonymous} from \"../interfaces/IVote\";\n\nfunction isAnonymous(vote: IVote | IVoteAnonymous): vote is IVoteAnonymous {\n    return (<IVoteAnonymous>vote).memberId !== undefined;\n}\n\nconst votesForMemberFilter = (currentMemberId: string) => (vote: IVote | IVoteAnonymous) =>\n    isAnonymous(vote) ? vote.memberId === currentMemberId : vote.member.id === currentMemberId;\n\nconst voteConverter = (vote: IVote | IVoteAnonymous): IVote => {\n    if (isAnonymous(vote)) {\n        return {\n            member: { id: vote.memberId },\n            votingType: vote.votingType\n        }\n    } else {\n        return vote;\n    }\n};\n\nconst votingsOnCardFilter = (currentCardId: string) => (votings: ICardVotings) => votings.cardId === currentCardId;\n\nfunction getVotesOnCard(votings: ICardVotings[], currentCardId: string): IVote[] | undefined {\n    const existingVotesOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n    if (existingVotesOnCard) {\n        return existingVotesOnCard.votes.map(voteConverter);\n    }\n}\n\nfunction getVotesOnCardForMember(votings: ICardVotings[], currentCardId: string, currentMemberId: string): IVote | undefined {\n    const votesOnCard = getVotesOnCard(votings, currentCardId);\n\n    if (votesOnCard) {\n        return votesOnCard.find(votesForMemberFilter(currentMemberId));\n    }\n}\n\nfunction updateVote(votes: IVote[], currentMember: IMember, currentVotingType: VotingType) {\n    const existingVoteForMember = votes.find(votesForMemberFilter(currentMember.id));\n\n    if (existingVoteForMember) {\n        if (isAnonymous(existingVoteForMember)) {\n            // todo\n            console.log(votes);\n            console.log('index: ' + votes.indexOf(existingVoteForMember));\n\n            // remove old vote\n            votes.splice(votes.indexOf(existingVoteForMember), 1);\n\n            // create and add new vote\n            votes.push({\n                member: currentMember,\n                votingType: currentVotingType\n            })\n        } else {\n            existingVoteForMember.votingType = currentVotingType;\n            existingVoteForMember.member = currentMember;\n        }\n    } else {\n        votes.push({\n            member: currentMember,\n            votingType: currentVotingType\n        })\n    }\n}\n\nexport const votingTypeFilter =\n    (currentVotingType: VotingType) => (vote: IVote) => vote.votingType === currentVotingType;\n\nexport function getVotesOnCurrentCard(t: any): Promise<IVote[] | undefined> {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n        ])\n        .then(([votings, currentCardId]) => getVotesOnCard(votings, currentCardId));\n}\n\nexport function getVotesOnCurrentCardForCurrentMember(t: any): Promise<IVote | undefined> {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n            t.member('id').get('id') as Promise<string>\n        ])\n        .then(([votings, currentCardId, currentMemberId]) =>\n            getVotesOnCardForMember(votings, currentCardId, currentMemberId));\n}\n\nexport function vote(t: any, currentVotingType: VotingType) {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.card('id').get('id') as Promise<string>,\n            t.member('id', 'username', 'fullName', 'avatar') as Promise<IMember>,\n            t.get('board', 'shared', 'voteAnonymously', true) as Promise<boolean>\n        ])\n        .then(([votings, currentCardId, currentMember, voteAnonymously]) => {\n            const votesOnCard = getVotesOnCard(votings, currentCardId);\n\n            if (voteAnonymously) {\n                currentMember.fullName = undefined;\n            }\n\n            if (votesOnCard) {\n                updateVote(votesOnCard, currentMember, currentVotingType);\n            } else {\n                votings.push({\n                    cardId: currentCardId,\n                    votes: [{\n                        member: currentMember,\n                        votingType: currentVotingType\n                    }]\n                })\n            }\n\n            t.set('card', 'shared', 'votings', votings);\n        });\n}\n\nexport function deleteVote(t: any) {\n    return Promise\n    .all([\n        t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n        t.card('id').get('id') as Promise<string>,\n        t.member('id').get('id') as Promise<string>\n    ])\n    .then(([votings, currentCardId, currentMemberId]) => {\n        const existingVotingsOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n        if (existingVotingsOnCard) {\n            const votes = existingVotingsOnCard.votes;\n            const existingVoteForMember = votes.find(votesForMemberFilter(currentMemberId));\n\n            if (existingVoteForMember) {\n                votes.splice(votes.indexOf(existingVoteForMember), 1);\n            }\n        }\n        t.set('card', 'shared', 'votings', votings);\n    });\n\n}\n\nexport function getVotingResults(t: any): Promise<IVotingResults | undefined> {\n    return Promise\n        .all([\n            t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>,\n            t.get('board', 'shared', 'voteAnonymously', true) as Promise<boolean>,\n            t.card('id').get('id') as Promise<string>,\n        ])\n        .then(([votings, voteAnonymously, currentCardId]) => {\n            const votes = getVotesOnCard(votings, currentCardId);\n\n            if (votes) {\n                const upVotes = votes.filter(votingTypeFilter(VotingType.UP)).map(vote => vote.member);\n                const downVotes = votes.filter(votingTypeFilter(VotingType.DOWN)).map(vote => vote.member);\n\n                return {\n                    voteAnonymously: voteAnonymously,\n                    upVoters: upVotes,\n                    downVoters: downVotes\n                }\n            }\n        });\n}\n","export function cleanupPath(path: string): string {\n    return '.' + path;\n}","import {getVotesOnCurrentCardForCurrentMember, vote, deleteVote} from \"./vote-service\";\nimport {VotingType} from \"../enums/VotingType\";\nimport thumbsUpImg from '../images/thumbs_up.svg';\nimport thumbsDownImg from \"../images/thumbs_down.svg\";\nimport trashImg from \"../images/trash.svg\";\nimport {cleanupPath} from \"./asset-service\";\nimport {IButton} from \"../interfaces/IButton\";\nimport {attachResults} from \"./attachment-service\";\n\nconst voteUpButton: IButton = {\n    icon: cleanupPath(thumbsUpImg),\n    text: 'Vote UP',\n    callback(t) {\n        return vote(t, VotingType.UP).then(t.closePopup());\n    }\n};\n\nconst voteDownButton: IButton = {\n    icon: cleanupPath(thumbsDownImg),\n    // hacky workaround to sort in correct order\n    text: '\\u200B' + 'Vote DOWN',\n    callback(t) {\n        return vote(t, VotingType.DOWN).then(t.closePopup());\n    }\n};\n\nconst deleteVoteButton: IButton = {\n    icon: cleanupPath(trashImg),\n    // hacky workaround to sort in correct order\n    text: '\\u2063' + 'Delete vote',\n    callback(t) {\n        return deleteVote(t).then(t.closePopup());\n    }\n};\n\nexport function getCardButtons(t) {\n    return getVotesOnCurrentCardForCurrentMember(t)\n        .then(function (vote) {\n            const buttons: IButton[] = [];\n\n            if (vote && vote.votingType === VotingType.UP) {\n                buttons.push(voteDownButton);\n                buttons.push(deleteVoteButton);\n            } else if (vote && vote.votingType === VotingType.DOWN) {\n                buttons.push(voteUpButton);\n                buttons.push(deleteVoteButton);\n            } else {\n                buttons.push(voteUpButton);\n                buttons.push(voteDownButton);\n            }\n\n            // todo bessere stelle?\n            attachResults(t);\n\n            return buttons;\n        });\n}","import thumbsUpImg from '../images/thumbs_up.svg';\nimport {cleanupPath} from \"./asset-service\";\nimport {IAttachment} from \"../interfaces/IAttachment\";\nimport {IAttachments} from \"../interfaces/IAttachments\";\n\nconst resultsAttachment: IAttachment = {\n    name: \"Voting Results\",\n    url: \"/results.html\"\n};\n\nexport function getAttachmentSections(t, options) {\n    const claimed = options.entries.filter(attachment => attachment.url.includes(resultsAttachment.url));\n\n    return [{\n        icon: cleanupPath(thumbsUpImg),\n        title: resultsAttachment.name,\n        claimed: claimed,\n        content: {\n            type: 'iframe',\n            url: t.signUrl(\"./results.html\")\n        }\n    }];\n}\n\nexport function attachResults(t: any): void {\n    (t.card('attachments') as Promise<IAttachments>)\n        .then((attachments) => {\n            const existentAttachment = attachments.attachments\n                .find(currentAttachment => currentAttachment.url.includes(resultsAttachment.url));\n\n            if (!existentAttachment) {\n                t.attach(resultsAttachment);\n            }\n        });\n}",null]}