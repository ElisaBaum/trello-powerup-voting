{"version":3,"sources":["powerup-voting.ts","services/bagde-service.ts","enums/VotingType.ts","services/vote-service.ts","services/settings-service.ts","services/asset-service.ts","services/button-service.ts","services/attachment-service.ts","packages/undefined@undefined"],"names":[],"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","file":"","sourcesContent":["import {getBadges} from \"./services/bagde-service\";\nimport {getCardButtons} from \"./services/button-service\";\nimport {initialize} from \"trello-powerups\";\nimport {getAttachmentSections} from \"./services/attachment-service\";\nimport settingsView from \"./views/settings.html\";\n\ninitialize({\n    'card-buttons': function (t, options) {\n        return getCardButtons(t);\n    },\n    'card-badges': function (t, options) {\n        return getBadges(t);\n    },\n    'attachment-sections': function (t, options) {\n        return getAttachmentSections(t, options);\n    },\n    'show-settings': function (t, options) {\n        return t.popup({\n            title: 'Settings',\n            url: settingsView\n        })\n    }\n});","import {VotingType} from \"../enums/VotingType\";\nimport {getVotesOnCurrentCard, votingTypeFilter} from \"./vote-service\";\nimport thumbsUpImg from '../images/thumbs_up_white.svg';\nimport thumbsDownImg from '../images/thumbs_down_white.svg';\nimport {cleanupPath} from \"./asset-service\";\nimport {IBadge} from \"../interfaces/IBadge\";\nimport {IVote} from \"../interfaces/IVote\";\n\nconst badgeColor = (votingType: VotingType) => votingType === VotingType.UP ? 'green' : 'red';\nconst badgeTitle = (votingType: VotingType) => votingType === VotingType.UP ? 'Ups' : 'Downs';\nconst badgeIcon = (votingType: VotingType) => votingType == VotingType.UP ? cleanupPath(thumbsUpImg) : cleanupPath(thumbsDownImg);\n\nfunction createBadge(votes: IVote[], votingType: VotingType): IBadge | undefined {\n    const numberOfVotes = votes.filter(votingTypeFilter(votingType)).length;\n\n    if (numberOfVotes) {\n        return {\n            title: badgeTitle(votingType),\n            text: numberOfVotes,\n            icon: badgeIcon(votingType),\n            color: badgeColor(votingType)\n        }\n    }\n}\n\nexport function getBadges(t: any): Promise<IBadge[]> {\n    return getVotesOnCurrentCard(t)\n        .then((votes) => {\n            if (votes) {\n                const upBadge = createBadge(votes, VotingType.UP);\n                const downBadge = createBadge(votes, VotingType.DOWN);\n                return [upBadge, downBadge].filter(badge => !!badge);\n            } else {\n                return [];\n            }\n        });\n}","export const enum VotingType {\n    UP,\n    DOWN\n}","import {ICardVotings} from \"../interfaces/ICardVotings\";\nimport {VotingType} from \"../enums/VotingType\";\nimport {IVotingResults} from \"../interfaces/IVotingResults\";\nimport {IMember} from \"../interfaces/IMember\";\nimport {IVote, IVoteAnonymous} from \"../interfaces/IVote\";\nimport {ICard} from \"../interfaces/ICard\";\nimport {settings} from \"./settings-service\";\n\nconst votings = (t: any) => t.get('card', 'shared', 'votings', []) as Promise<ICardVotings[]>;\nconst card = (t: any) => t.card('id') as Promise<ICard>;\nconst member = (t: any) => t.member('id', 'username', 'fullName', 'avatar') as Promise<IMember>;\n\nconst votingsOnCardFilter = (currentCardId: string) => (votings: ICardVotings) => votings.cardId === currentCardId;\nconst votesForMemberFilter = (currentMemberId: string) => (vote: IVote | IVoteAnonymous) =>\n    (isAnonymous(vote) ? vote.memberId === currentMemberId : vote.member.id === currentMemberId);\n\nfunction isAnonymous(vote: IVote | IVoteAnonymous): vote is IVoteAnonymous {\n    return (<IVoteAnonymous>vote).memberId !== undefined;\n}\n\nconst voteConverter = (vote: IVote | IVoteAnonymous): IVote => {\n    if (isAnonymous(vote)) {\n        return {\n            member: { id: vote.memberId },\n            votingType: vote.votingType\n        }\n    } else {\n        return vote;\n    }\n};\n\nfunction  getVotesOnCard(votings: ICardVotings[], currentCardId: string): IVote[] | undefined {\n    const existingVotesOnCard = votings.find(votingsOnCardFilter(currentCardId));\n\n    if (existingVotesOnCard) {\n        return existingVotesOnCard.votes.map(voteConverter);\n    }\n}\n\nfunction updateVote(votes: (IVote | IVoteAnonymous)[], currentMember: IMember, currentVotingType: VotingType) {\n    const existingVoteForMember = votes.find(votesForMemberFilter(currentMember.id));\n\n    if (existingVoteForMember) {\n        if (isAnonymous(existingVoteForMember)) {\n            // remove old vote\n            votes.splice(votes.indexOf(existingVoteForMember), 1);\n\n            // create and add new vote\n            votes.push({\n                member: currentMember,\n                votingType: currentVotingType\n            })\n        } else {\n            existingVoteForMember.votingType = currentVotingType;\n            existingVoteForMember.member = currentMember;\n        }\n    } else {\n        votes.push({\n            member: currentMember,\n            votingType: currentVotingType\n        })\n    }\n}\n\nexport const votingTypeFilter = (currentVotingType: VotingType) => (vote: IVote) => vote.votingType === currentVotingType;\n\nexport function getVotesOnCurrentCard(t: any): Promise<IVote[] | undefined> {\n    return Promise.all([votings(t), card(t)])\n        .then(([votings, currentCard]) => getVotesOnCard(votings, currentCard.id));\n}\n\nexport function getVotesOnCurrentCardForCurrentMember(t: any): Promise<IVote | undefined> {\n    return Promise.all([votings(t), card(t), member(t)])\n        .then(([votings, currentCard, currentMember]) => {\n                const votesOnCard = getVotesOnCard(votings, currentCard.id);\n\n                if (votesOnCard) {\n                    return votesOnCard.find(votesForMemberFilter(currentMember.id));\n                }\n        });\n}\n\nexport function vote(t: any, currentVotingType: VotingType) {\n    return Promise.all([votings(t), card(t), member(t), settings(t)])\n        .then(([votings, currentCard, currentMember, settings]) => {\n            const votingsOnCard = votings.find(votingsOnCardFilter(currentCard.id));\n\n            if (settings.voteAnonymously) {\n                // anonymize member\n                currentMember = {id: currentMember.id};\n            }\n\n            if (votingsOnCard) {\n                updateVote(votingsOnCard.votes, currentMember, currentVotingType);\n            } else {\n                votings.push({\n                    cardId: currentCard.id,\n                    votes: [{\n                        member: currentMember,\n                        votingType: currentVotingType\n                    }]\n                })\n            }\n\n            t.set('card', 'shared', 'votings', votings);\n        });\n}\n\nexport function deleteVote(t: any) {\n    return Promise.all([votings(t), card(t), member(t)])\n        .then(([votings, currentCard, currentMember]) => {\n            const votingsOnCard = votings.find(votingsOnCardFilter(currentCard.id));\n\n            if (votingsOnCard) {\n                const votes = votingsOnCard.votes;\n                const existingVoteForMember = votes.find(votesForMemberFilter(currentMember.id));\n\n                if (existingVoteForMember) {\n                    votes.splice(votes.indexOf(existingVoteForMember), 1);\n                    t.set('card', 'shared', 'votings', votings);\n                }\n            }\n        });\n}\n\nexport function getVotingResults(t: any): Promise<IVotingResults | undefined> {\n    return Promise.all([votings(t), card(t), settings(t)])\n        .then(([votings, currentCard, settings]) => {\n            const votes = getVotesOnCard(votings, currentCard.id);\n\n            if (votes) {\n                const upVoters = votes.filter(votingTypeFilter(VotingType.UP)).map(vote => vote.member);\n                const downVoters = votes.filter(votingTypeFilter(VotingType.DOWN)).map(vote => vote.member);\n\n                return {\n                    voteAnonymously: settings.voteAnonymously,\n                    upVoters: upVoters,\n                    downVoters: downVoters\n                }\n            }\n        });\n}\n","import {ISettings} from \"../interfaces/ISettings\";\n\nexport const defaultSettings: ISettings = {voteAnonymously: true};\n\nexport const settings = (t: any) => t.get('board', 'shared', 'settings', defaultSettings) as Promise<ISettings>;\n\nexport const updateSettings = (t: any, settings: ISettings) => t.set('board', 'shared', 'settings', settings);","export function cleanupPath(path: string): string {\n    return '.' + path;\n}","import {getVotesOnCurrentCardForCurrentMember, vote, deleteVote} from \"./vote-service\";\nimport {VotingType} from \"../enums/VotingType\";\nimport thumbsUpImg from '../images/thumbs_up.svg';\nimport thumbsDownImg from \"../images/thumbs_down.svg\";\nimport trashImg from \"../images/trash.svg\";\nimport {cleanupPath} from \"./asset-service\";\nimport {IButton} from \"../interfaces/IButton\";\nimport {attachResults} from \"./attachment-service\";\n\nconst voteUpButton: IButton = {\n    icon: cleanupPath(thumbsUpImg),\n    text: 'Vote UP',\n    callback(t) {\n        vote(t, VotingType.UP).then(t.closePopup());\n    }\n};\n\nconst voteDownButton: IButton = {\n    icon: cleanupPath(thumbsDownImg),\n    // hacky workaround to sort in correct order\n    text: '\\u200B' + 'Vote DOWN',\n    callback(t) {\n        vote(t, VotingType.DOWN).then(t.closePopup());\n    }\n};\n\nconst deleteVoteButton: IButton = {\n    icon: cleanupPath(trashImg),\n    // hacky workaround to sort in correct order\n    text: '\\u2063' + 'Delete vote',\n    callback(t) {\n        return t.popup({\n            title: 'Board Button Popup',\n            url: './settings.html'\n        });\n    }\n};\n\nexport function getCardButtons(t) {\n    return getVotesOnCurrentCardForCurrentMember(t)\n        .then(function (vote) {\n            const buttons: IButton[] = [];\n\n            if (vote && vote.votingType === VotingType.UP) {\n                buttons.push(voteDownButton);\n                buttons.push(deleteVoteButton);\n            } else if (vote && vote.votingType === VotingType.DOWN) {\n                buttons.push(voteUpButton);\n                buttons.push(deleteVoteButton);\n            } else {\n                buttons.push(voteUpButton);\n                buttons.push(voteDownButton);\n            }\n\n            // workaround: attach results every time buttons are rendered\n            attachResults(t);\n\n            return buttons;\n        });\n}","import thumbsUpImg from '../images/thumbs_up.svg';\nimport {cleanupPath} from \"./asset-service\";\nimport {IAttachment} from \"../interfaces/IAttachment\";\nimport {IAttachments} from \"../interfaces/IAttachments\";\nimport {IAttachmentSection} from \"../interfaces/IAttachmentSection\";\nimport {getVotesOnCurrentCard} from \"./vote-service\";\nimport resultsView from \"../views/results.html\";\n\nconst resultsAttachment: IAttachment = {\n    name: \"Voting Results\",\n    url: \"http://lmgtfy.com/?q=Voting+results\"\n};\n\nexport function getAttachmentSections(t, options): Promise<IAttachmentSection[]> {\n    console.log(resultsView);\n\n    return getVotesOnCurrentCard(t)\n        .then((votes) => {\n            if (votes) {\n                const claimed = options.entries.filter(attachment => attachment.url.includes(resultsAttachment.url));\n\n                return [{\n                    icon: cleanupPath(thumbsUpImg),\n                    title: resultsAttachment.name,\n                    claimed: claimed,\n                    content: {\n                        type: 'iframe',\n                        url: t.signUrl(cleanupPath(resultsView))\n                    }\n                }];\n            } else {\n                return [];\n            }\n    });\n}\n\nexport function attachResults(t: any): void {\n    Promise.all([\n        getVotesOnCurrentCard(t),\n        (t.card('attachments') as Promise<IAttachments>)\n    ]).then(([votings, attachments]) => {\n        if (votings) {\n            const existentAttachment = attachments.attachments\n                .find(currentAttachment => currentAttachment.url === resultsAttachment.url);\n\n            if (! existentAttachment) {\n                t.attach(resultsAttachment);\n            }\n        }\n    });\n}",null]}